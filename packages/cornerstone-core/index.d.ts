// Type definitions for cornerstone-core 2.3
// Project: https://github.com/cornerstonejs/cornerstone
// Definitions by: SangYeob Yu <https://github.com/deminoth>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

export default cornerstone;
import { default as drawImage } from "./types/internal/drawImage.js";
import { default as generateLut } from "./types/internal/generateLut.js";
import { default as getDefaultViewport } from "./types/internal/getDefaultViewport.js";
import { default as setDefaultViewport } from "./types/internal/setDefaultViewport.js";
import { default as requestAnimationFrame } from "./types/internal/requestAnimationFrame.js";
import { default as storedPixelDataToCanvasImageData } from "./types/internal/storedPixelDataToCanvasImageData.js";
import { default as storedColorPixelDataToCanvasImageData } from "./types/internal/storedColorPixelDataToCanvasImageData.js";
import { default as storedPixelDataToCanvasImageDataColorLUT } from "./types/internal/storedPixelDataToCanvasImageDataColorLUT.js";
import { default as storedPixelDataToCanvasImageDataPseudocolorLUT } from "./types/internal/storedPixelDataToCanvasImageDataPseudocolorLUT.js";
import { default as internal } from "./types/internal/index.js";
import { renderLabelMapImage } from "./types/rendering/renderLabelMapImage.js";
import { renderPseudoColorImage } from "./types/rendering/renderPseudoColorImage.js";
import { renderColorImage } from "./types/rendering/renderColorImage.js";
import { renderGrayscaleImage } from "./types/rendering/renderGrayscaleImage.js";
import { renderWebImage } from "./types/rendering/renderWebImage.js";
import { default as renderToCanvas } from "./types/rendering/renderToCanvas.js";
import { default as canvasToPixel } from "./types/canvasToPixel.js";
import { default as disable } from "./types/disable.js";
import { default as displayImage } from "./types/displayImage.js";
import { default as draw } from "./types/draw.js";
import { default as drawInvalidated } from "./types/drawInvalidated.js";
import { default as enable } from "./types/enable.js";
import { getElementData } from "./types/enabledElementData.js";
import { removeElementData } from "./types/enabledElementData.js";
import { getEnabledElement } from "./types/enabledElements.js";
import { addEnabledElement } from "./types/enabledElements.js";
import { getEnabledElementsByImageId } from "./types/enabledElements.js";
import { getEnabledElements, Image, Viewport } from "./types/enabledElements.js";
import { addLayer } from "./types/layers.js";
import { removeLayer } from "./types/layers.js";
import { getLayer } from "./types/layers.js";
import { getLayers } from "./types/layers.js";
import { getVisibleLayers } from "./types/layers.js";
import { setActiveLayer } from "./types/layers.js";
import { getActiveLayer } from "./types/layers.js";
import { purgeLayers } from "./types/layers.js";
import { setLayerImage } from "./types/layers.js";
import { default as fitToWindow } from "./types/fitToWindow.js";
import { default as getDefaultViewportForImage } from "./types/getDefaultViewportForImage.js";
import { default as getImage } from "./types/getImage.js";
import { default as getPixels } from "./types/getPixels.js";
import { default as getStoredPixels } from "./types/getStoredPixels.js";
import { default as getViewport } from "./types/getViewport.js";
import { loadImage } from "./types/imageLoader.js";
import { loadAndCacheImage } from "./types/imageLoader.js";
import { registerImageLoader } from "./types/imageLoader.js";
import { registerUnknownImageLoader } from "./types/imageLoader.js";
import { default as invalidate } from "./types/invalidate.js";
import { default as invalidateImageId } from "./types/invalidateImageId.js";
import { default as pageToPixel } from "./types/pageToPixel.js";
import { default as pixelToCanvas } from "./types/pixelToCanvas.js";
import { default as reset } from "./types/reset.js";
import { default as resize } from "./types/resize.js";
import { default as setToPixelCoordinateSystem } from "./types/setToPixelCoordinateSystem.js";
import { default as setViewport } from "./types/setViewport.js";
import { default as updateImage } from "./types/updateImage.js";
import { default as pixelDataToFalseColorData } from "./types/pixelDataToFalseColorData.js";
import { default as rendering } from "./types/rendering/index.js";
import { default as imageCache } from "./types/imageCache.js";
import { default as metaData } from "./types/metaData.js";
import { default as webGL } from "./types/webgl/index.js";
import { default as colors } from "./types/colors/index.js";
import { convertImageToFalseColorImage } from "./types/falseColorMapping.js";
import { convertToFalseColorImage } from "./types/falseColorMapping.js";
import { restoreImage } from "./types/falseColorMapping.js";
import { default as EVENTS } from "./types/events.js";
import { events } from "./types/events.js";
import { default as triggerEvent } from "./types/triggerEvent.js";
declare namespace cornerstone {
    export { drawImage };
    export { generateLut };
    export { getDefaultViewport };
    export { requestAnimationFrame };
    export { storedPixelDataToCanvasImageData };
    export { storedColorPixelDataToCanvasImageData };
    export { storedPixelDataToCanvasImageDataColorLUT };
    export { storedPixelDataToCanvasImageDataPseudocolorLUT };
    export { internal };
    export { renderLabelMapImage };
    export { renderPseudoColorImage };
    export { renderColorImage };
    export { renderGrayscaleImage };
    export { renderWebImage };
    export { renderToCanvas };
    export { canvasToPixel };
    export { disable };
    export { displayImage };
    export { draw };
    export { drawInvalidated };
    export { enable };
    export { getElementData };
    export { removeElementData };
    export { getEnabledElement };
    export { addEnabledElement };
    export { getEnabledElementsByImageId };
    export { getEnabledElements };
    export { addLayer };
    export { removeLayer };
    export { getLayer };
    export { getLayers };
    export { getVisibleLayers };
    export { setActiveLayer };
    export { getActiveLayer };
    export { purgeLayers };
    export { setLayerImage };
    export { fitToWindow };
    export { getDefaultViewportForImage };
    export { setDefaultViewport };
    export { getImage };
    export { getPixels };
    export { getStoredPixels };
    export { getViewport };
    export { loadImage };
    export { loadAndCacheImage };
    export { registerImageLoader };
    export { registerUnknownImageLoader };
    export { invalidate };
    export { invalidateImageId };
    export { pageToPixel };
    export { pixelToCanvas };
    export { reset };
    export { resize };
    export { setToPixelCoordinateSystem };
    export { setViewport };
    export { updateImage };
    export { pixelDataToFalseColorData };
    export { rendering };
    export { imageCache };
    export { metaData };
    export { webGL };
    export { colors };
    export { convertImageToFalseColorImage };
    export { convertToFalseColorImage };
    export { restoreImage };
    export { EVENTS };
    export { events };
    export { triggerEvent };
    export { Image };
    export { Viewport };
}
export { drawImage, generateLut, getDefaultViewport, setDefaultViewport, requestAnimationFrame, storedPixelDataToCanvasImageData, storedColorPixelDataToCanvasImageData, storedPixelDataToCanvasImageDataColorLUT, storedPixelDataToCanvasImageDataPseudocolorLUT, internal, renderLabelMapImage, renderPseudoColorImage, renderColorImage, renderGrayscaleImage, renderWebImage, renderToCanvas, canvasToPixel, disable, displayImage, draw, drawInvalidated, enable, getElementData, removeElementData, getEnabledElement, addEnabledElement, getEnabledElementsByImageId, getEnabledElements, addLayer, removeLayer, getLayer, getLayers, getVisibleLayers, setActiveLayer, getActiveLayer, purgeLayers, setLayerImage, fitToWindow, getDefaultViewportForImage, getImage, getPixels, getStoredPixels, getViewport, loadImage, loadAndCacheImage, registerImageLoader, registerUnknownImageLoader, invalidate, invalidateImageId, pageToPixel, pixelToCanvas, reset, resize, setToPixelCoordinateSystem, setViewport, updateImage, pixelDataToFalseColorData, rendering, imageCache, metaData, webGL, colors, convertImageToFalseColorImage, convertToFalseColorImage, restoreImage, EVENTS, events, triggerEvent };

export as namespace cornerstone;

